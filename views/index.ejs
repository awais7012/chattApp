<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Resist Chat</title>
    <link rel="stylesheet" href="/styles.css" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
    />
    <!-- Add Socket.IO client library -->
    <script src="/socket.io/socket.io.js"></script>
    <!-- Add your script after Socket.IO -->
    <script>
      // Initialize socket connection
      const socket = io();

      // Wait for DOM to be fully loaded
      document.addEventListener("DOMContentLoaded", () => {
        // Remove alert after 5 seconds
        setTimeout(() => {
          const alert = document.getElementById("alert");
          if (alert) {
            alert.style.display = "none";
          }
        }, 5000);

        // Form submission handling
        const form = document.getElementById("form");
        const input = document.getElementById("input");
        const messages = document.getElementById("messages");

        if (form) {
          form.addEventListener("submit", (e) => {
            e.preventDefault();
            if (input.value) {
              const messageId = Date.now().toString();
              const messageElement = createMessage(
                input.value,
                messageId,
                true
              );
              messages.appendChild(messageElement);

              socket.emit("chat message", {
                text: input.value,
                id: messageId,
              });

              input.value = "";
              messages.scrollTop = messages.scrollHeight;
            }
          });
        }

        // Handle incoming messages
        socket.on("chat message", (data) => {
          const messageElement = createMessage(data.text, data.id, false);
          messages.appendChild(messageElement);
          messages.scrollTop = messages.scrollHeight;
        });

        // Socket event for handling reactions
        socket.on("message reaction", (data) => {
          const messageElement = document.querySelector(
            `[data-message-id="${data.messageId}"]`
          );
          if (messageElement) {
            updateMessageReaction(messageElement, data.reaction);
          }
        });

        const musicBtn = document.getElementById("musicBtn");
        const musicPicker = document.getElementById("musicPicker");
        const musicInput = document.getElementById("musicInput");
        const audioPlayer = document.getElementById("audioPlayer");
        const playPauseBtn = document.getElementById("playPauseBtn");
        const stopBtn = document.getElementById("stopBtn");
        const musicControls = document.getElementById("musicControls");
        let isPlaying = false;

        // Toggle music picker
        musicBtn.addEventListener("click", () => {
          musicPicker.style.display =
            musicPicker.style.display === "none" ? "flex" : "none";
        });

        // Handle file selection
        musicInput.addEventListener("change", (e) => {
          const file = e.target.files[0];
          if (file) {
            const reader = new FileReader();
            reader.onload = function (e) {
              // Set the audio source for the sender
              audioPlayer.src = e.target.result;
              musicControls.style.display = "flex";

              // Emit the file data to other users
              socket.emit("music file", {
                name: file.name,
                data: e.target.result,
              });
            };
            reader.readAsDataURL(file);
          }
        });

        // Play/Pause button
        playPauseBtn.addEventListener("click", () => {
          if (isPlaying) {
            audioPlayer.pause();
            playPauseBtn.innerHTML = '<i class="fas fa-play"></i>';
            socket.emit("music control", { action: "pause" });
          } else {
            audioPlayer
              .play()
              .then(() => {
                playPauseBtn.innerHTML = '<i class="fas fa-pause"></i>';
                socket.emit("music control", { action: "play" });
              })
              .catch((error) => {
                console.error("Error playing audio:", error);
              });
          }
          isPlaying = !isPlaying;
        });

        // Stop button
        stopBtn.addEventListener("click", () => {
          audioPlayer.pause();
          audioPlayer.currentTime = 0;
          playPauseBtn.innerHTML = '<i class="fas fa-play"></i>';
          isPlaying = false;
          socket.emit("music control", { action: "stop" });
        });

        // Handle received music file
        socket.on("music file", (data) => {
          console.log("Received music file");
          audioPlayer.src = data.data;
          musicControls.style.display = "flex";
        });

        // Handle received music controls
        socket.on("music control", (data) => {
          console.log("Received music control:", data.action);
          switch (data.action) {
            case "play":
              audioPlayer
                .play()
                .then(() => {
                  playPauseBtn.innerHTML = '<i class="fas fa-pause"></i>';
                  isPlaying = true;
                })
                .catch((error) => {
                  console.error("Error playing audio:", error);
                });
              break;
            case "pause":
              audioPlayer.pause();
              playPauseBtn.innerHTML = '<i class="fas fa-play"></i>';
              isPlaying = false;
              break;
            case "stop":
              audioPlayer.pause();
              audioPlayer.currentTime = 0;
              playPauseBtn.innerHTML = '<i class="fas fa-play"></i>';
              isPlaying = false;
              break;
          }
        });

        // Close music picker when clicking outside
        document.addEventListener("click", (e) => {
          if (!musicBtn.contains(e.target) && !musicPicker.contains(e.target)) {
            musicPicker.style.display = "none";
          }
        });

        // Add error handling for audio
        audioPlayer.addEventListener("error", (e) => {
          console.error("Audio error:", e);
        });
      });

      // Function to create the reaction UI
      function createMessage(text, messageId, isSent) {
        const messageDiv = document.createElement("div");
        messageDiv.className = `message ${isSent ? "sent" : "received"}`;
        messageDiv.setAttribute("data-message-id", messageId);

        const messageContent = document.createElement("div");
        messageContent.className = "message-content";
        messageContent.textContent = text;
        messageDiv.appendChild(messageContent);

        // Add reaction button
        const reactionBtn = document.createElement("div");
        reactionBtn.className = "reaction-button";
        reactionBtn.innerHTML = "😊";
        messageDiv.appendChild(reactionBtn);

        // Add emoji picker
        const emojiPicker = document.createElement("div");
        emojiPicker.className = "emoji-picker";
        const emojis = ["👍", "❤️", "😂", "😮", "😢", "🙏"];

        emojis.forEach((emoji) => {
          const emojiOption = document.createElement("span");
          emojiOption.className = "emoji-option";
          emojiOption.textContent = emoji;
          emojiOption.onclick = (e) => {
            e.stopPropagation();
            socket.emit("message reaction", {
              messageId: messageId,
              reaction: emoji,
            });
            updateMessageReaction(messageDiv, emoji);
            hideAllEmojiPickers();
          };
          emojiPicker.appendChild(emojiOption);
        });

        messageDiv.appendChild(emojiPicker);

        // Add click handler for reaction button
        reactionBtn.onclick = (e) => {
          e.stopPropagation();
          hideAllEmojiPickers();
          emojiPicker.classList.toggle("active");
        };

        return messageDiv;
      }

      // Function to update message with reaction
      function updateMessageReaction(messageElement, reaction) {
        let reactionElement = messageElement.querySelector(".message-reaction");
        if (!reactionElement) {
          reactionElement = document.createElement("div");
          reactionElement.className = "message-reaction";
          messageElement.appendChild(reactionElement);
        }
        reactionElement.textContent = reaction;
      }

      // Function to hide all emoji pickers
      function hideAllEmojiPickers() {
        document.querySelectorAll(".emoji-picker").forEach((picker) => {
          picker.classList.remove("active");
        });
      }

      // Hide emoji pickers when clicking outside
      document.addEventListener("click", hideAllEmojiPickers);
    </script>
  </head>

  <style>
    body {
      margin: 0;
      padding: 0;
      font-family: Arial, sans-serif;
      background-color: #000; /* Dark background */
      color: #fff;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }

    .container {
      display: flex;
      flex-direction: column;
      height: 100vh;
    }

    #username-container {
      display: flex;
      justify-content: center;
      align-items: center;
      flex-direction: column;
      height: 100vh;
    }

    .chat-container {
      flex: 1;
      display: flex;
      flex-direction: column;
      height: calc(100vh - 150px); /* Adjust for header and footer */
      margin-bottom: 60px; /* Add space for footer */
    }

    .header-container {
      display: flex;
      justify-content: center;
      align-items: center;
      position: relative;
      padding: 10px 0;
      background-color: #000; /* Match your background */
    }

    .chat-title {
      text-align: center;
      font-size: 24px;
      margin: 10px 0;
      text-shadow: 0 0 10px rgba(255, 255, 255, 0.7),
        0 0 20px rgba(255, 255, 255, 0.5), 0 0 30px rgba(255, 255, 255, 0.3);
    }

    #messages {
      flex: 1;
      overflow-y: auto;
      padding: 10px;
      padding-bottom: 60px; /* Add extra padding at bottom */
      background-color: #181818;
      border-top: 1px solid #333;
      border-bottom: 1px solid #333;
    }

    .input-container {
      position: fixed;
      bottom: 60px; /* Position above footer */
      left: 0;
      right: 0;
      background-color: #303030;
      padding: 10px;
      border-top: 1px solid #333;
    }

    #message-input {
      flex: 1;
      padding: 10px;
      border-radius: 5px;
      border: none;
      background-color: #404040;
      color: #fff;
    }

    #message-input::placeholder {
      color: #bbb;
    }

    #message-form button {
      margin-left: 10px;
      padding: 10px 15px;
      border: none;
      border-radius: 5px;
      background-color: #555;
      color: #fff;
      cursor: pointer;
    }

    #message-form button:hover {
      background-color: #666;
    }

    footer {
      background-color: #303030;
      padding: 10px;
      text-align: center;
      border-top: 1px solid #333;
      position: fixed;
      bottom: 0;
      left: 0;
      width: 100%;
      z-index: 1000;
    }

    .footer-content p {
      margin: 0;
      color: #bbb;
    }

    .footer-content a {
      color: #fff;
      text-decoration: none;
      margin: 0 5px;
    }

    .footer-content a:hover {
      text-decoration: underline;
    }

    .fab {
      font-size: 18px;
      margin-left: 5px;
    }

    /* Ensure the footer doesn't overlap the message form */
    #chat-container {
      margin-bottom: 50px; /* Adjust based on footer height */
    }

    .message {
      position: relative;
      margin: 5px 0;
      padding: 8px 12px;
      border-radius: 8px;
      max-width: 70%;
    }

    /* Sender message style with green background */
    .message.sent {
      margin-left: auto;
      background-color: #025c4c;
    }

    /* Receiver message style */
    .message.received {
      margin-right: auto;
      background-color: #303030;
    }

    /* Reaction button positioning */
    .message.received .reaction-button {
      left: -30px;
      right: auto;
    }

    .message.sent .reaction-button {
      right: -30px;
      left: auto;
    }

    .reaction-button {
      position: absolute;
      top: 50%;
      transform: translateY(-50%);
      cursor: pointer;
      opacity: 0;
      transition: opacity 0.2s;
      background: #404040;
      border-radius: 50%;
      width: 24px;
      height: 24px;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    /* Emoji picker positioning */
    .emoji-picker {
      position: absolute;
      top: 50%;
      transform: translateY(-50%);
      background: #404040;
      border-radius: 20px;
      padding: 5px;
      display: none;
      flex-direction: column;
      z-index: 1000;
    }

    /* Position emoji picker for received messages */
    .message.received .emoji-picker {
      left: 100%;
      margin-left: 5px;
    }

    /* Position emoji picker for sent messages */
    .message.sent .emoji-picker {
      right: -40px;
      left: auto;
    }

    /* New centered reaction positioning for both sent and received messages */
    .message-reaction {
      position: absolute;
      bottom: -15px; /* Position below the message */
      right: 10px; /* Slightly to the right */
      background: #404040;
      border-radius: 10px;
      padding: 2px 5px;
      font-size: 14px;
      z-index: 1; /* Ensure reaction appears above messages */
    }

    .message:hover .reaction-button {
      opacity: 1;
    }

    .emoji-picker.active {
      display: flex;
    }

    .emoji-option {
      cursor: pointer;
      padding: 4px;
      transition: transform 0.2s;
    }

    .emoji-option:hover {
      transform: scale(1.2);
      background-color: #505050;
      border-radius: 50%;
    }

    .music-control {
      position: absolute;
      right: 20px;
      top: 50%;
      transform: translateY(-50%);
      z-index: 1000; /* Ensure icon stays above other elements */
    }

    .music-control i {
      font-size: 24px;
      cursor: pointer;
      color: #fff;
      transition: color 0.3s;
      padding: 10px; /* Add padding for better clickable area */
    }

    .music-control i:hover {
      color: #025c4c;
    }

    .music-picker {
      position: absolute;
      right: 0;
      top: 100%;
      background: #404040;
      border-radius: 10px;
      padding: 10px;
      display: none;
      flex-direction: column;
      gap: 10px;
      z-index: 1001; /* Higher than the icon */
      min-width: 150px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3); /* Add shadow for better visibility */
      margin-top: 5px; /* Add some space from the icon */
    }

    .music-picker button {
      background: #505050;
      border: none;
      color: white;
      padding: 8px 12px;
      border-radius: 5px;
      cursor: pointer;
      display: flex;
      align-items: center;
      gap: 5px;
      width: 100%; /* Make buttons full width */
    }

    .music-picker button:hover {
      background: #606060;
    }

    #musicControls {
      display: flex;
      gap: 5px;
      justify-content: center;
    }

    #musicControls button {
      width: 40px;
      height: 40px;
      justify-content: center;
    }
  </style>
  <body>
    <!-- Alert popup -->
    <div id="alert" class="alert-popup">
      Feel free to send racist, sexist, and Narcissist: msgs. If you want to
      contribute, fork the repo from GitHub!
    </div>

    <div class="header-container">
      <div class="chat-title">Racist Chat</div>
      <div class="music-control">
        <i class="fas fa-music" id="musicBtn"></i>
        <div class="music-picker" id="musicPicker">
          <input
            type="file"
            id="musicInput"
            accept="audio/*"
            style="display: none"
          />
          <button onclick="document.getElementById('musicInput').click()">
            <i class="fas fa-upload"></i> Choose Music
          </button>
          <div id="musicControls" style="display: none">
            <button id="playPauseBtn"><i class="fas fa-play"></i></button>
            <button id="stopBtn"><i class="fas fa-stop"></i></button>
          </div>
        </div>
      </div>
    </div>

    <!-- Main chat area -->
    <div class="chat-container">
      <div id="messages"></div>
    </div>

    <!-- Fixed input area -->
    <div class="input-container">
      <form id="form" action="">
        <input
          id="input"
          autocomplete="off"
          placeholder="Type your message..."
        />
        <button type="submit">Send</button>
      </form>
    </div>

    <!-- Footer -->
    <footer>
      <div class="footer-content">
        <p>
          Developed by Romeo
          <a href="https://github.com/awais7012/" target="_blank">
            <i class="fab fa-github"></i>
          </a>
          <a href="https://www.instagram.com/_awai_s" target="_blank">
            <i class="fab fa-instagram"></i>
          </a>
          |
          <a
            href="https://github.com/awais7012/"
            target="_blank"
            class="github-link"
          >
            awais7012
          </a>
        </p>
      </div>
    </footer>

    <!-- Add this hidden audio element -->
    <audio id="audioPlayer"></audio>
  </body>
</html>
